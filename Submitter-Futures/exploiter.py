from threading import Thread
from util import *
import pexpect
from concurrent.futures import ThreadPoolExecutor
from config import Config
import requests
from submitter import Submitter


# class ExploitThread(Thread):
#
#    def __init__(self, exploit, target):
#        Thread.__init__(self)
#        self.exploit = exploit
#        self.target = target

#    def run(self):
#        p = pexpect.spawn(self.exploit)
#        while p.isalive():
#            flag = p.readline().decode().strip()
#               if flag != '':
#               Submitter(flag)


def _exploit(exploit, target):
    p = pexpect.spawn(exploit)
    while p.isalive():
        flag = p.readline().decode().strip()
        if flag != '':
            requests.post('http://127.0.0.1:8080/submit', data={'flag': flag, 'exploit': exploit, 'target': target})
        # Submitter(flag)


class Exploiter:

    # @staticmethod
    # def start():
    #    for exploit in get_exploits():
    #        for target in get_targets():
    #            t = ExploitThread(exploit, target)
    #            t.daemon = True
    #            t.start()

    @staticmethod
    def start():
        executor = ThreadPoolExecutor(Config.Exploiter.PoolSize)
        exploits = get_exploits()
        targets = get_targets()

        for exploit in exploits:
            for target in targets:
                executor.submit(_exploit, exploit, target)


if __name__ == '__main__':
    Exploiter.start()
