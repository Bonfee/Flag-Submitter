from multiprocessing import Pool
from util import *
import pexpect
from config import Config
import requests
from concurrent.futures import ThreadPoolExecutor


def _exploit(exploit, target):
    p = pexpect.spawn(exploit)
    while p.isalive():
        flag = p.readline().decode().strip()
        if flag != '':
            requests.post('http://127.0.0.1:8080/submit', data={'flag': flag, 'exploit': exploit, 'target': target})


# Default exploiter class
# Uses multiprocessing (should bypass GIL restrictions)
class Exploiter:

    @staticmethod
    def start():
        pool = Pool(Config.Exploiter.PoolSize)
        exploits = get_exploits()
        targets = get_targets()

        for exploit in exploits:
            for target in targets:
                pool.apply_async(_exploit, (exploit, target))


# Alternative exploiter class
# Uses ThreadPoolExecutor (threading library)
class ExploiterThread:

    @staticmethod
    def start():
        executor = ThreadPoolExecutor(Config.Exploiter.PoolSize)
        exploits = get_exploits()
        targets = get_targets()

        for exploit in exploits:
            for target in targets:
                executor.submit(_exploit, exploit, target)


if __name__ == '__main__':
    Exploiter.start()
